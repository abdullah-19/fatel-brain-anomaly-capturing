'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var zeros = require('zeros');

/**
 * Grayscale
 */
function grayscale(pixels) {
  var _pixels$shape = _slicedToArray(pixels.shape, 2),
      width = _pixels$shape[0],
      height = _pixels$shape[1];

  var res = zeros([width, height]);
  for (var x = 0; x < width; x++) {
    for (var y = 0; y < height; y++) {
      var gray = 0.2126 * pixels.get(x, y, 0) + 0.7152 * pixels.get(x, y, 1) + 0.0722 * pixels.get(x, y, 2);
      res.set(x, y, gray);
    }
  }

  return res;
}

module.exports = grayscale;