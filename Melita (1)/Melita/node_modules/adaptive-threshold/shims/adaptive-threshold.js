'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var zeros = require('zeros');
var grayscale = require('./helpers/grayscale');
var localMean = require('./helpers/local_mean');

function adaptiveThreshold(pixels) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$size = options.size,
      size = _options$size === undefined ? 7 : _options$size,
      _options$compensation = options.compensation,
      compensation = _options$compensation === undefined ? 7 : _options$compensation;

  var midSize = Math.floor(size / 2);

  var _pixels$shape = _slicedToArray(pixels.shape, 2),
      width = _pixels$shape[0],
      height = _pixels$shape[1];

  var res = zeros([width, height]);

  var grayscaled = grayscale(pixels);
  var meanMatrix = localMean(grayscaled, size);

  var _meanMatrix$shape = _slicedToArray(meanMatrix.shape, 2),
      mWidth = _meanMatrix$shape[0],
      mHeight = _meanMatrix$shape[1];

  for (var x = 0; x < width; x++) {
    for (var y = 0; y < height; y++) {
      var pixel = grayscaled.get(x, y);

      var mX = x - midSize;
      var mY = y - midSize;
      if (x - midSize < 0) {
        mX = 0;
      } else if (x - midSize >= mWidth) {
        mX = mWidth - 1;
      } else if (y - midSize < 0) {
        mY = 0;
      } else if (y - midSize > mHeight) {
        mY = mHeight - 1;
      }
      var mean = meanMatrix.get(mX, mY);

      var threshold = mean - compensation;
      if (pixel < threshold) {
        res.set(x, y, 0);
      } else {
        res.set(x, y, 255);
      }
    }
  }
  return res;
}

module.exports = adaptiveThreshold;